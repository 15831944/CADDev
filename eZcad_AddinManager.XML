<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eZcad_AddinManager</name>
    </assembly>
    <members>
        <member name="T:eZcad.AddinManager.AddinManagerLoader">
            <summary> AddinManager插件 的窗口加载、命令执行 </summary>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="F:eZcad.AddinManager.form_AddinManager._nodesInfo">
            <summary> 与 TreeView 同步的节点数据 </summary>
        </member>
        <member name="P:eZcad.AddinManager.form_AddinManager.NodesInfo">
            <summary> 与 TreeView 同步的节点数据 </summary>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.RefreshTreeView(System.Collections.Generic.Dictionary{eZcad.AddinManager.AddinManagerAssembly,System.Collections.Generic.List{eZcad.AddinManager.ICADExCommand}})">
            <summary>
            将所有的外部命令刷新到列表控件中
            </summary>
            <param name="nodesInfo">字典中每一个程序集对应其中的多个外部命令</param>
        </member>
        <member name="T:eZcad.AddinManager.form_AddinManager.ExCmdCompare">
            <summary> 外部命令进行比较的方法 </summary>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.AddMethodsInOneAssembly(System.String,System.Collections.Generic.List{eZcad.AddinManager.ICADExCommand})">
            <summary> 将从一个 Assembly 中加载进来的所有有效的外部命令同步到 _nodesInfo 中 </summary>
            <param name="methods"></param>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.ChooseOpenDll(System.String)">
            <summary> 通过选择文件对话框选择要进行数据提取的CAD文件 </summary>
            <returns> 要进行数据提取的CAD文件的绝对路径 </returns>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.ShowExCommandDescription(System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs)">
            <summary> 提取出 TreeView中节点对应的外部命令上的描述字符 </summary>
        </member>
        <member name="F:eZcad.AddinManager.form_AddinManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:eZcad.AddinManager.form_AddinManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:eZcad.AddinManager.AddinManagerAssembly">
            <summary> 比较两个 Assembly 是否表示同一个对象 </summary>
            <remarks>在比较的过程中，会先对GetHashCode的返回值进行比较，如果返回的HashCode是相同的，则再进行 Equals 比较；
            如果返回的HashCode值不同，则直接认为Equals为false。</remarks>  
        </member>
        <member name="T:eZcad.AddinManager.AssemblyComparer">
            <summary> 比较两个 Assembly 是否表示同一个对象 </summary>
            <remarks>在比较的过程中，会先对GetHashCode的返回值进行比较，如果返回的HashCode是相同的，则再进行 Equals 比较；
            如果返回的HashCode值不同，则直接认为Equals为false。</remarks>
        </member>
        <member name="M:eZcad.AddinManager.AssemblyComparer.System#Collections#Generic#IComparer{eZcad#AddinManager#AddinManagerAssembly}#Compare(eZcad.AddinManager.AddinManagerAssembly,eZcad.AddinManager.AddinManagerAssembly)">
            <summary>
             比较两个程序集哪个排在前面
            </summary>
            <returns></returns>
        </member>
        <member name="T:eZcad.AddinManager.AssemblyInfoDllManager">
            <summary> 通过Dll中的Settings来进行程序集信息的存储与提取 </summary>
        </member>
        <member name="M:eZcad.AddinManager.AssemblyInfoDllManager.GetInfosFromSettings">
            <summary> 将 Settings 配置文件中的字符进行反序列化 </summary>
            <returns></returns>
            <remarks>对于CAD.NET的开发，不要在 IExtensionApplication.Initialize() 方法中执行此操作，否则即使在Initialize时可以正常序列化，
            但是在调用ExternalCommand时还是会出bug，通常的报错为：没有为该对象定义无参数的构造函数。 </remarks>
        </member>
        <member name="T:eZcad.AddinManager.AssemblyInfoFileManager">
            <summary> 通过 外部文本文件 来进行程序集信息的存储与提取 </summary>
        </member>
        <member name="M:eZcad.AddinManager.AssemblyInfoFileManager.GetInfosFromFile">
            <summary> 将外部 二进制文件 中的字符进行反序列化 </summary>
            <remarks>对于CAD.NET的开发，不要在 IExtensionApplication.Initialize() 方法中执行此操作，否则即使在Initialize时可以正常序列化，
            但是在调用ExternalCommand时还是会出bug，通常的报错为：没有为该对象定义无参数的构造函数。 </remarks>
        </member>
        <member name="T:eZcad.AddinManager.AssemblyInfos">
            <summary> 将 AddinManager中的程序信与外部命令信息提取为可以进行序列化的信息 </summary>
        </member>
        <member name="P:eZcad.AddinManager.AssemblyInfoSettings.AssemblyInfoSerial">
            <summary> 将 AddinManager 中的程序集信息序列化后的字符 </summary>
        </member>
        <member name="T:eZcad.AddinManager.BinarySerializer">
            <summary>
            在.NET中，我们可以将对象序列化从而保存对象的状态到内存或者磁盘文件中，或者分布式应用程序中用于系统通信，，这样就有可能做出一个“对象数据库”了。
            一般来说，二进制序列化的效率要高，所获得的字节数最小。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.AddinManager.BinarySerializer.EnCode(System.IO.Stream,System.Object)">
            <summary>
            将任意一个声明为Serializable的类或者其List等集合中的数据，以二进制的格式保存到对应的流文件中。
            </summary>
            <param name="fs">推荐使用FileStream对象。此方法中不会对Stream对象进行Close。</param>
            <param name="Data">要进行保存的可序列化对象</param>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.AddinManager.BinarySerializer.DeCode(System.IO.Stream)">
            <summary>
            从二进制流文件中，将其中的二进制数据反序列化为对应的类或集合对象。
            </summary>
            <param name="fs">推荐使用FileStream对象。此方法中不会对Stream对象进行Close。</param>
            <returns>此二进制流文件所对应的可序列化对象</returns>
            <remarks></remarks>
        </member>
        <member name="T:eZcad.AddinManager.StringSerializer">
            <summary>
            将任意一个有 Serializable标记的类以二进制转换器将类中所有数据与字符串间的相互序列化。
            即可以将类中的数据（包括数组）序列化为字符，还可以将序列化的字符反序列化为一个类。
            </summary>
        </member>
        <member name="M:eZcad.AddinManager.StringSerializer.Encode64(System.Object)">
            <summary>
            Encode arbitrary .NET serialisable object
            into binary data encodes as base64 string.
            </summary>
        </member>
        <member name="M:eZcad.AddinManager.StringSerializer.Decode64(System.String)">
            <summary>
            Decode arbitrary .NET serialisable object
            from binary data encoded as base64 string.
            </summary>
        </member>
        <member name="T:eZcad.AddinManager.StringSerializer.ZengfyLinkBinder">
            <summary>
            为了解决SerializationException，方法之一是确保此assembly放置在与aCAD.exe 或 revit.exe相同的文件夹中，
            另一个方法就是实现一个像这样的类。
            </summary>
            <remarks>
             Resolve System.Runtime.Serialization.SerializationException, Message =
            "Unable to find assembly 'StoreData, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'."
            One solution is to ensure that assembly resides in same directory as aCAD.exe or revit.exe,
            the other is to implement a class such as this, cf.
            http://www.codeproject.com/soap/Serialization_Samples.asp
            </remarks>
        </member>
        <member name="T:eZcad.AddinManager.AssemLoader">
            <summary> 将程序集及其引用项加载到进程中 </summary>
            <remarks>此类是完全从 Revit AddinManager中移植过来并稍微修改的</remarks>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.#ctor">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.LoadAddin(System.String)">
            <summary> 将程序集加载到程序中 </summary>
            <param name="filePath">程序集的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.HookAssemblyResolve">
            <summary>
            AssemblyResolve事件在.Net对程序集的解析失败时触发，返回一个Assembly对象。
            因此，我们只要在这个事件的处理程序里手动加载对应目录的dll，并把对应dll的Assembly对象返回， .Net就能正确加载对应的dll了。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary> 在 Execute() 方法中将不能引用到的程序集进行手动加载 </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.SearchAssemblyFileInTempFolder(System.String)">
            <summary> 在临时文件夹中根据程序集名搜索对应的文件：对应于引用时 Copy Local 设置为 true 的程序集 </summary>
            <param name="assemName"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManager.AssemLoader.IsRevitAPIReferenced(System.Reflection.Assembly)">
            <summary>
            检查 RevitAPI.dll 是否被引用
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:eZcad.AddinManager.AssemblySelectorForm">
            <summary> 选择程序集文件的窗口 </summary>
            <remarks>此类是完全从 Revit AddinManager中移植过来并稍微修改的</remarks>
        </member>
        <member name="M:eZcad.AddinManager.AssemblySelectorForm.#ctor(System.String)">
            <summary> 构造函数 </summary>
            <param name="assemName"></param>
        </member>
        <member name="T:eZcad.AddinManager.FileUtils">
            <summary> Revit AddinManager 中用来进行文件处理的类，用来参考，并不具有通用性 </summary>
        </member>
        <member name="F:eZcad.AddinManager.FileUtils.AddinFolderPath">
            <summary> 所有Addin临时文件在硬盘中的文本夹 </summary>
        </member>
        <member name="F:eZcad.AddinManager.FileUtils.AddinDebugerTextFile">
            <summary> 所有Addin文本调试器的位置 </summary>
        </member>
        <member name="M:eZcad.AddinManager.FileUtils.CopyFileToFolder(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            
            </summary>
            <param name="sourceFilePath"></param>
            <param name="destFolder"></param>
            <param name="onlyCopyRelated"></param>
            <param name="allCopiedFiles">方法结束后，此 List中包含有所有复制到的文件 </param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManager.FileUtils.GetFolderSize(System.String)">
            <summary> 返回文件夹内所有文件的总大小，单位为 MB  </summary>
            <param name="folderPath"></param>
            <returns> 文件夹内所有文件的总大小，单位为 MB </returns>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandExecutor.InvokeCurrentExternalCommand">
            <summary> 执行当前（即上次执行过的那个）外部命令 </summary>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandExecutor.InvokeExternalCommand(System.String,eZcad.AddinManager.ICADExCommand)">
            <summary> 执行 CAD 的外部命令 </summary>
            <param name="assemblyPath">外部命令所对应的dll的绝对路径</param>
            <param name="externalCommand">此命令必须是实现了 IExternalCommand.Execute </param>
            <remarks>出于调试的即时更新的考虑，这里在每一次调试外部命令时，都对最新的dll进行重新加载。</remarks>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandExecutor.RunActiveCommand(eZcad.AddinManager.ICADExCommand,System.String,System.String@)">
            <summary> 执行外部命令 </summary>
            <param name="addinItem">注意这里的 addinItem 实例是刷新前的程序集中对应的类，
            这里只能用来提取其 FullName 字符串，而不能直接用来执行， 因为虽然它确实可以执行，但是执行的是重新编译前的那个方法。</param>
            <param name="assemblyPath"></param>
            <param name="errorMsg"></param>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandExecutor.GetDebugMessage(System.Exception)">
            <summary> 在调试阶段，为每一种报错显示对应的报错信息及出错位置。 </summary>
        </member>
        <member name="T:eZcad.AddinManager.ExCommandFinder">
            <summary> 将指定程序集中的 IExternalCommand 类提取出来 </summary>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandFinder.RetriveExternalCommandsFromAssembly(System.String)">
            <summary> 将程序集文件加载到内存，并且提取出其中的 CAD 外部命令 </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManager.ExCommandFinder.FindExCommandMethod(System.Type)">
            <summary>
            从一个 实现了 CAD 的命令接口 的类中搜索到对应的 外部命令
            </summary>
            <param name="implimentedType">此类必须 实现了 CAD 的命令接口 </param>
            <returns></returns>
        </member>
        <member name="T:eZcad.AddinManager.EcDescriptionAttribute">
            <summary>
            用来作为实现 ExternalCommand 的类的描述
            </summary>
        </member>
        <member name="F:eZcad.AddinManager.EcDescriptionAttribute.Description">
            <summary> 具体的描述 </summary>
        </member>
        <member name="T:eZcad.AddinManager.ICADExCommand">
            <summary> 用来进行AddinManager快速调试的接口。实现此接口的类必须有一个无参数的构造函数。
            另外，推荐实现此接口的类所在程序集中也设计一个实现 IDllActivator_std 接口的类。 </summary>
        </member>
        <member name="M:eZcad.AddinManager.ICADExCommand.Execute(Autodesk.AutoCAD.EditorInput.SelectionSet,System.String@,System.Collections.Generic.IList{Autodesk.AutoCAD.DatabaseServices.ObjectId}@)">
            <summary> CAD AddinManger 快速调试插件 </summary>
            <param name="impliedSelection"> 用户在执行方法之前已经选择好的对象。</param>
            <param name="errorMessage">当返回值为<see cref="F:eZcad.AddinManager.ExternalCommandResult.Failed"/>时，这个属性代表给出的报错信息。</param>
            <param name="elementSet">当返回值为<see cref="F:eZcad.AddinManager.ExternalCommandResult.Failed"/>时，这个属性代表与出错内容相关的任何对象。</param>
            <returns></returns>
        </member>
        <member name="T:eZcad.Addins.AutoSwitchIME">
            <summary> 自动切换输入法 </summary>
        </member>
        <member name="F:eZcad.Addins.AutoSwitchIME.TextCommands">
            <summary> 所有要设置为中文输入法的操作 </summary>
        </member>
        <member name="F:eZcad.Addins.AutoSwitchIME.AlwaysInEnglishWhenDrawing">
            <summary> 在除开文字编辑以外的所有情况下，都以英文输入法操作 </summary>
        </member>
        <member name="M:eZcad.Addins.AutoSwitchIME.SetEnglishWhenDrawing">
            <summary> 在除开文字编辑以外的所有情况下，都以英文输入法操作 </summary>
        </member>
        <member name="F:eZcad.Addins.AutoSwitchIME._justEditedText">
            <summary> 用户刚执行完文本编辑 </summary>
        </member>
        <member name="F:eZcad.Addins.AutoSwitchIME.Enabled">
            <summary> 启用此功能 </summary>
        </member>
        <member name="T:eZcad.Addins.EcLoadTemplate1">
            <summary> 自动切换输入法 </summary>
        </member>
        <member name="M:eZcad.Addins.EcLoadTemplate1.#ctor">
            <summary> 如果此类中有作为实例方法的 EcInstanceMethod， 则此类必须有一个无参数的构造函数，否则，当用户在 AutoCAD中调用此实例方法时，会出现报错“没有为该对象定义无参数的构造函数” </summary>
        </member>
        <member name="T:eZcad.Addins.MenuItemsLoader">
            <summary> 加载程序集并添加对应菜单 </summary>
        </member>
        <member name="M:eZcad.Addins.MenuItemsLoader.EcLoadMenuItems">
            <summary> 将多个单行文字按其定位进行组合 </summary>
        </member>
        <member name="M:eZcad.Addins.MenuItemsLoader.LoadMenuItems(eZcad.DocumentModifier,Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary> 将多个单行文字按其定位进行组合 </summary>
        </member>
        <member name="T:eZcad.AddinManagerDebuger">
            <summary>
            用来辅助调试工作
            </summary>
        </member>
        <member name="M:eZcad.AddinManagerDebuger.PickObject``1(Autodesk.AutoCAD.EditorInput.Editor,System.String)">
            <summary> 在界面中选择一个对象 </summary>
            <typeparam name="T"></typeparam>
            <param name="ed"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AddinManagerDebuger.DoSomethingTemplate(eZcad.DocumentModifier,Autodesk.AutoCAD.EditorInput.SelectionSet)">
            <summary>
            具体的高度操作的代码模板
            </summary>
            <param name="docMdf"></param>
            <param name="impliedSelection"></param>
        </member>
        <member name="T:eZcad.ExternalCommand">
            <param name="docMdf"></param>
            <param name="impliedSelection"></param>
            <returns>如果要取消操作（即将事务 Abort 掉），则返回 false，如果要提交事务，则返回 true </returns>
        </member>
        <member name="T:eZcad.DocumentModifier">
            <summary> 对文档进行配置，以启动文档的改写模式 </summary>
        </member>
        <member name="M:eZcad.DocumentModifier.ExecuteCommand(eZcad.ExternalCommand)">
            <summary> 执行外部命令，并且在执行命令之前，自动将 事务打开</summary>
            <param name="cmd">要执行的命令</param>
        </member>
        <member name="F:eZcad.DocumentModifier._originalTransaction">
            <summary> 启动命令时的最被的那个事务，区别于在命令执行过程中新开启的事务 </summary>
        </member>
        <member name="F:eZcad.DocumentModifier.acActiveDocument">
            <summary> 当前活动的AutoCAD文档 </summary>
        </member>
        <member name="F:eZcad.DocumentModifier.acDataBase">
            <summary> 当前活动的AutoCAD文档中的数据库 </summary>
        </member>
        <member name="F:eZcad.DocumentModifier.acEditor">
            <summary>  </summary>
        </member>
        <member name="M:eZcad.DocumentModifier.#ctor(System.Boolean)">
            <summary> 对文档进行配置，以启动文档的改写模式 </summary>
            <param name="openDebugerText">是否要打开一个文本调试器</param>
        </member>
        <member name="M:eZcad.DocumentModifier.RestartTransaction(System.Boolean)">
            <summary> 重启一个新的事务 </summary>
            <param name="commitCancel">true 表示将当前事务提交后再重启，false 表示将当前事务回滚后再重启。 </param>
        </member>
        <member name="M:eZcad.DocumentModifier.WriteLineIntoDebuger(System.Object[])">
            <summary> 向文本调试器中写入数据 </summary>
            <param name="value"></param>
        </member>
        <member name="M:eZcad.DocumentModifier.WriteLinesIntoDebuger(System.Object[])">
            <summary> 向文本调试器中写入多行数据 </summary>
            <param name="lines"></param>
        </member>
        <member name="M:eZcad.DocumentModifier.WriteNow(System.Object[])">
            <summary> 实时显示调试信息在同一行中 </summary>
            <param name="value">集合中的所有数据写在一行，并以“,”分隔</param>
        </member>
        <member name="M:eZcad.DocumentModifier.WriteLinesNow(System.Object[])">
            <summary> 实时显示调试信息在不同行中 </summary>
            <param name="value">集合中的所有数据分别写在不同行</param>
        </member>
        <member name="M:eZcad.DocumentModifier.LineFeedInCommandLine">
            <summary> 将 各种无关提示进行换行 ，使命令行中显示更清爽 </summary>
        </member>
        <member name="T:eZcad.Utility.ACadConstants">
            <summary> AutoCAD 软件中的系统常数 </summary>
        </member>
        <member name="F:eZcad.Utility.ACadConstants.LayoutName_Model">
            <summary> 模型空间也属于<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.Layout"/>，其对应的LayoutName为“Model” </summary>
        </member>
        <member name="F:eZcad.Utility.ACadConstants.LayerName_Defpoints">
            <summary> AutoCAD 中默认的那个不打印层的名称 </summary>
        </member>
        <member name="T:eZcad.Utility.AdvancedExtents3d">
            <summary> 对空间立方体进行一系列的信息提取 </summary>
        </member>
        <member name="F:eZcad.Utility.AdvancedExtents3d.Anchor.GeometryCenter">
            <summary> 几何中心 </summary>
        </member>
        <member name="M:eZcad.Utility.AdvancedExtents3d.GetAnchor(eZcad.Utility.AdvancedExtents3d.Anchor)">
            <summary> 获取空间立方体的特征角点 </summary>
            <param name="anchor"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.AdvancedExtents3d.GetHeight">
            <summary> 高度 </summary>
            <returns></returns>
        </member>
        <member name="T:eZcad.Utility.EditStateIdentifier">
            <summary> 用来获取AutoCAD界面中的编辑状态 </summary>
        </member>
        <member name="T:eZcad.Utility.EditStateIdentifier.CurrentEditState">
            <summary> 用户当前的编辑状态 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.CurrentEditState.BlockTable">
            <summary> 所有<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.BlockTableRecord"/>对象的集合 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.CurrentEditState.EditState">
            <summary> 用户当前正在编辑状态 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.CurrentEditState.CurrentBTR">
            <summary> 用户当前正在编辑的块定义 </summary>
        </member>
        <member name="M:eZcad.Utility.EditStateIdentifier.CurrentEditState.#ctor(Autodesk.AutoCAD.DatabaseServices.BlockTable,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,eZcad.Utility.EditStateIdentifier.EditState)">
            <summary> 构造函数 </summary>
        </member>
        <member name="M:eZcad.Utility.EditStateIdentifier.CurrentEditState.ExitBlockEditor(Autodesk.AutoCAD.ApplicationServices.Document)">
            <summary> 退出块编辑模式 </summary>
            <param name="doc"></param>
        </member>
        <member name="T:eZcad.Utility.EditStateIdentifier.EditState">
            <summary> AutoCAD界面中的编辑状态 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.EditState.InModel">
            <summary> 正在模型空间进行操作，同时包括视口编辑模式、块定义的编辑器模式，以及块定义的在位编辑模式 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.EditState.InLayout">
            <summary> 正在布局空间进行操作 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.EditState.InBlockEditor">
            <summary> 正在块编辑器中对某个块定义进行操作，此时的坐标原点为块定义的基点 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.EditState.InRefEditor">
            <summary> 正在块的在位编辑状态中对某个块定义进行操作，此时的坐标原点为文档模型的原点 </summary>
        </member>
        <member name="F:eZcad.Utility.EditStateIdentifier.EditState.InViewport">
            <summary> 正在模型空间或者布局空间的视口中进行操作 </summary>
        </member>
        <member name="M:eZcad.Utility.EntityArray2D`1.Arrange2D">
            <summary>
            将集合中的元素在二维平面中进行分格填空，以形成一个按二维几何排布的数组
            每一个方格中可能有多个实体，比如多个文字挤在一堆。第(0,0)个元素代表位于几何坐标系中的靠左上角的元素们。
            </summary>
            <returns>考虑到AutoCAD几何坐标系中，Y坐标较小者位于集合前面，而在计算机的二维数组表示方法中，
            下标(0,0)一般表示位于左上角的元素，所以，这里在将几何元素填充到二维数组中时，将Y值的排序进行反转。</returns>
        </member>
        <member name="M:eZcad.Utility.EntityArray2D`1.SortToOneVector(System.Boolean,System.Collections.Generic.List{eZcad.Utility.EntityArray2D{`0}.EntBound},System.Int32@)">
            <summary> 将集合中的元素排列到一行或一列中（紧密算法，即相交实体的认为在同一行或同一列） </summary>
            <param name="inRow">true 表示将集合中的元素排列到一行中，false 表示将集合中的实体排列到一列中 </param>
            <param name="entities"></param>
            <param name="count">排列完成后，共有多少行或者多少列</param>
            <returns>返回的字典中，键表示每一个实体对象，值代表此对象在排列好的行中的下标，第一个值的下标为0。多个实体可能对应同一个下标</returns>
        </member>
        <member name="M:eZcad.Utility.EntityArray2D`1.InsertEntityToOneVec(System.Boolean,System.Collections.Generic.SortedDictionary{System.Double,eZcad.Utility.Rectangle2D},System.Collections.Generic.Dictionary{eZcad.Utility.EntityArray2D{`0}.EntBound,System.Double},eZcad.Utility.EntityArray2D{`0}.EntBound)">
            <summary> 将新的实体在原集合中按是否在同一列进行插值，即将所有的元素压缩到同一行中 </summary>
            <param name="inRow"> true 表示将新的实体在原集合中按是否在同一列进行插值，即将所有的元素压缩到同一行中；
            false 表示 将新的实体在原集合中按是否在同一行进行插值，即将所有的元素压缩到同一列中 </param>
            <param name="sepratedSortedBounds"></param>
            <param name="sortedEntIndex"></param>
            <param name="newEnt"></param>
        </member>
        <member name="T:eZcad.Utility.Rectangle2D">
            <summary>
            二维矩形方框区域
            </summary>
        </member>
        <member name="M:eZcad.Utility.Rectangle2D.RowIntersectWith(eZcad.Utility.Rectangle2D)">
            <summary> 比较 Y 值，以确定是否在同一行 </summary>
            <param name="recB"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Rectangle2D.ColumnIntersectWith(eZcad.Utility.Rectangle2D)">
            <summary> 比较 X 值，以确定是否在同一列 </summary>
        </member>
        <member name="T:eZcad.Utility.IntersectState">
            <summary>
            两个矩形之间的相交关系。
            对于左右的比较，左即对应于下，右即对应于上。
            </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.Intersect">
            <summary> B 与 A 相交面积不为0 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.ITop">
            <summary> B 与 A 相交，而且B的最上边比A的最上边高 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.IBottom">
            <summary> B 与 A 相交，而且B的最下边比A的最下边低 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.IInside">
            <summary> A 完全将 B 包含 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.IContain">
            <summary> B 完全将 A 包含 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.ICoinside">
            <summary> B 与 A 完全重合 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.Apart">
            <summary> B 与 A 相交面积为 0  </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.OTop">
            <summary> B 在 A 的上方，不相交或者只有边界相交 </summary>
        </member>
        <member name="F:eZcad.Utility.IntersectState.OBottom">
            <summary> B 在 A 的下方，不相交或者只有边界相交 </summary>
        </member>
        <member name="T:eZcad.Utility.ExtensionMethods">
            <summary>
            
            </summary>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.ToXYPlane(Autodesk.AutoCAD.Geometry.Point3d)">
            <summary> 以直接取消Z坐标的方式投影到XY平面 </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.SetLength(Autodesk.AutoCAD.Geometry.Vector3d,System.Double)">
            <summary> 设置一个向量的长度 </summary>
            <param name="originalVec"></param>
            <param name="newLength"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetAttributeDefinitions(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord)">
            <summary> 根据块参照定义中所有的属性定义 </summary>
            <param name="btr">要进行提取的块定义</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetAttributeDefinitions(Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,System.String)">
            <summary> 根据块参照定义中 指定的 Tag 的属性定义 </summary>
            <param name="btr">要进行提取的块定义</param>
            <param name="tag">要进行提取的块定义</param>
            <returns>如果未找到，则返回 null </returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetAttributeReferences(Autodesk.AutoCAD.DatabaseServices.BlockReference)">
            <summary> 根据块参照中属性定义的名称返回对应的项 </summary>
            <param name="blk"></param>
            <param name="attTag">属性定义的名称</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetAttributeReference(Autodesk.AutoCAD.DatabaseServices.BlockReference,System.String)">
            <summary> 根据块参照中属性定义的名称返回对应的项 </summary>
            <param name="blk"></param>
            <param name="attTag">属性定义的名称</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.Get2dCurve(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary> 将三维多段线投影到XY平面上，以转换为二维多段线 </summary>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.Get2dLinearCurve(Autodesk.AutoCAD.DatabaseServices.Polyline)">
            <summary> 将三维折线多段线投影到XY平面上，以转换为二维多段线 </summary>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.Get2dLinearCurve(Autodesk.AutoCAD.Geometry.CompositeCurve3d)">
            <summary> 将三维折线多段线投影到XY平面上，以转换为二维多段线 </summary>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.ConvertToHandle(System.String)">
            <summary> 将表示句柄值的字符转换为句柄 </summary>
            <param name="handle">表示句柄的字符，即16进制的数值，比如“409E”。最小的句柄值为1。</param>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetObjectId(Autodesk.AutoCAD.DatabaseServices.Handle,Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary> 根据 AutoCAD 中对象的句柄值，返回对应的对象的<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.ObjectId"/>值，如果不存在，则返回 <seealso cref="P:Autodesk.AutoCAD.DatabaseServices.ObjectId.Null"/> </summary>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetDBObject``1(Autodesk.AutoCAD.DatabaseServices.Handle,Autodesk.AutoCAD.DatabaseServices.Database)">
            <summary> 根据 AutoCAD 中对象的句柄值，返回对应的对象，未找到对应的对象，或者对象类型转换出错，则返回 null </summary>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetTextWidth(Autodesk.AutoCAD.DatabaseServices.DBText)">
            <summary> 单行文本的宽度，不论此文本的旋转角度是多少，都返回其文字宽度，而不是其水平宽度 </summary>
            <remarks>对于旋转角度为0的单行文字，其宽度可以通过Bounds来直接提取，而对于有旋转的单行文字，其Bounds的水平宽度不代表其真实宽度，而应该进行一些折减。本
            算法的大致思路是通过Bounds的矩形对角线长度减去两侧的误差值。
            折减后的宽度与真实宽度的误差可控制在4%以内，文字旋转角度靠近45、135、225、315度时误差最大。</remarks>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.GetRigion(System.Double)">
            <summary> 计算某角度位于哪一象限 </summary>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.SetAlignment(Autodesk.AutoCAD.DatabaseServices.DBText,Autodesk.AutoCAD.DatabaseServices.AttachmentPoint)">
            <summary> 在不改变单行文字定位的情况下，修改其对正方式。默认为默认的左对齐 </summary>
            <param name="txt"></param>
            <param name="justify"> 整体对正方式 </param>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.SetAlignment(Autodesk.AutoCAD.DatabaseServices.DBText,Autodesk.AutoCAD.DatabaseServices.TextVerticalMode,Autodesk.AutoCAD.DatabaseServices.TextHorizontalMode)">
            <summary> 在不改变单行文字定位的情况下，修改其对齐方式。默认为默认的左对齐 </summary>
            <param name="txt"></param>
            <param name="horiMode">水平对齐方式</param>
            <param name="vertMode">竖直对齐方式</param>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.Contains(Autodesk.AutoCAD.DatabaseServices.Extents3d,Autodesk.AutoCAD.Geometry.Point3d)">
            <summary> 是否包含某一点（包括边界） </summary>
        </member>
        <member name="M:eZcad.Utility.ExtensionMethods.AppendMessage(System.Exception)">
            <summary> 具体的报错信息与报错位置 </summary>
            <returns></returns>
        </member>
        <member name="F:eZcad.Utility.eZConstants.eZGroupCommnad">
            <summary>
            在<see cref="T:Autodesk.AutoCAD.Runtime.CommandMethodAttribute"/>中设置的外部命令的 GroupName。
            </summary>
        </member>
        <member name="F:eZcad.Utility.eZConstants.ImageDirectory">
            <summary>
            外部命令在 AutoCAD 界面中对应的控件的图片所在的文件夹。
            当引用某个图片文件时，直接通过“<seealso cref="F:eZcad.Utility.eZConstants.ImageDirectory"/> + "picture.png"”即可
            </summary>
            <remarks>“.\”表示当前正在执行的程序集所在的文件夹，“..\”表示当前正在执行的程序集所在的文件夹</remarks>
        </member>
        <member name="P:eZcad.Utility.FormOk.CloseOnEscape">
            <summary> 是否支持按下ESC时退出窗口 </summary>
        </member>
        <member name="T:eZcad.Utility.LayoutUtil">
            <summary> 将多个块的属性值进行统一编辑 </summary>
        </member>
        <member name="M:eZcad.Utility.LayoutUtil.CreateLayout(System.String)">
            <summary> 创建一个新的布局 </summary>
        </member>
        <member name="M:eZcad.Utility.LayoutUtil.SwitchLayout">
            <summary> 切换到模型空间 </summary>
        </member>
        <member name="M:eZcad.Utility.LayoutUtil.SwitchLayout(Autodesk.AutoCAD.DatabaseServices.ObjectId)">
            <summary> 切换到图纸空间 </summary>
            <param name="layoutId">除模型空间之外的 Layout 的Id</param>
        </member>
        <member name="M:eZcad.Utility.LayoutUtil.SwitchLayout(System.String)">
            <summary> 切换到图纸空间 </summary>
            <param name="layoutName">除模型空间之外的 Layout 的名称，其值不可能为 Model</param>
        </member>
        <member name="M:eZcad.Utility.LayoutUtil.SetPlotSettings(Autodesk.AutoCAD.DatabaseServices.Layout,System.String,System.String,System.String)">
            <summary> Apply plot settings to the provided layout. </summary>
            <param name="layout">要进行设置的布局</param>
            <param name="pageSize">The canonical media name for our page size. 比如 "ANSI_B_(11.00_x_17.00_Inches)"</param>
            <param name="styleSheet">The pen settings file (ctb or stb). 比如 "monochrome.ctb"</param>
            <param name="device">The name of the output device. 比如 "DWF6 ePlot.pc3"</param>
        </member>
        <member name="T:eZcad.Utility.SolidUtils">
            <summary>
            与实体、曲面、网格相关的操作
            </summary>
        </member>
        <member name="M:eZcad.Utility.SolidUtils.CreateMeshFromSolid">
            <summary> 将任意实体转换为网格 </summary>
        </member>
        <member name="M:eZcad.Utility.SolidUtils.ConvertToSubDMesh(Autodesk.AutoCAD.DatabaseServices.PolyFaceMesh)">
            <summary> 将多面网格转换为细分网格 </summary>
        </member>
        <member name="M:eZcad.Utility.SolidUtils.ConvertToPolyFaceMesh(Autodesk.AutoCAD.DatabaseServices.SubDMesh,Autodesk.AutoCAD.DatabaseServices.BlockTableRecord,Autodesk.AutoCAD.DatabaseServices.Transaction)">
            <summary> 将多面网格转换为细分网格 </summary>
        </member>
        <member name="M:eZcad.Utility.TextUtils.ConvertDbTextSpecialSymbols(Autodesk.AutoCAD.DatabaseServices.DBText)">
            <summary> 将单行文字中的特殊字符转换为对应的数据，以填充到多行文字中，使其显示效果相同 </summary>
            <param name="dbText">以 Hztxt 作为字体的单行文字对象中的文本</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.TextUtils.ConvertDbTextSpecialSymbols(System.String)">
            <summary> 将单行文字中的特殊字符转换为对应的数据，以填充到多行文字中，使其显示效果相同 </summary>
            <param name="dbText">以 Hztxt 作为字体的单行文字对象中的文本</param>
            <returns></returns>
        </member>
        <member name="F:eZcad.Utility.TextUtils.HztxtSpecialSymbols">
            <summary>
            HZTXT 字体中的特殊符号与对应的编码
            </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.SsUpper2">
            <summary> 上标 2 </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.ssUpper3">
            <summary> 上标 3 </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.SsDiameter">
            <summary> 直径符号(圆+斜竖线) </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.SsHPB300">
            <summary> HPB300 的钢筋符号 </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.SsHRB335">
            <summary> HRB335 的钢筋符号（不再生产 20170510） </summary>
        </member>
        <member name="F:eZcad.Utility.TextUtils.SsHRB400">
            <summary> HRB400 的钢筋符号 </summary>
        </member>
        <member name="T:eZcad.Utility.SymbolTableUtils">
            <summary> 字典 Dictionary 与 符号表 SymbolTable 操作 </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.Utility.SymbolTableUtils.GetDictionaryValue``1(Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String)">
            <summary> 提取字典中的键所对应的值 </summary>
            <typeparam name="T"></typeparam>
            <param name="src"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.SymbolTableUtils.ModifyDictXrecord(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,Autodesk.AutoCAD.DatabaseServices.ResultBuffer)">
            <summary> 直接修改字典中 Xrecord 类型数据的属性 </summary>
            <param name="dict"> 用户必须自行确保此时 dict 已经打开写入权限 </param>
            <param name="buffer"> 要添加或者修改的键中的新值 </param>
            <remarks>也可以不通过修改属性的方法，而参考<seealso cref="M:eZcad.Utility.SymbolTableUtils.OverlayDictValue(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,Autodesk.AutoCAD.DatabaseServices.DBObject)"/>函数直接将同名键删除然后新建的方式来进行同名键值的刷新。</remarks>
        </member>
        <member name="M:eZcad.Utility.SymbolTableUtils.OverlayDictValue(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.DBDictionary,System.String,Autodesk.AutoCAD.DatabaseServices.DBObject)">
            <summary> 先移除同名键，然后再通过SetAt添加新的同名键值对 </summary>
            <param name="trans"></param>
            <param name="dict"> 用户必须自行确保此时 dict 已经打开写入权限 </param>
            <param name="key">要进行添加或者修改的键</param>
            <param name="value">要添加或者刷新的新值，可以是 <seealso cref="T:Autodesk.AutoCAD.DatabaseServices.Xrecord"/>、<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.DBDictionary"/> 等类型 </param>
            <remarks>对于<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.DBDictionary"/>的键值对的修改，一般是要求先将键值对添加到<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.DBDictionary"/>中，然后再对<param name="value"></param>值的属性进行设置</remarks>
        </member>
        <member name="M:eZcad.Utility.SymbolTableUtils.GetOrCreateLayer(Autodesk.AutoCAD.DatabaseServices.Transaction,Autodesk.AutoCAD.DatabaseServices.Database,System.String)">
            <summary> 如果数据库中有此图层，则直接返回，如果没有，则创建对应图层 </summary>
            <param name="trans">请确保事务已经打开</param>
            <param name="db"></param>
            <param name="layerName"></param>
        </member>
        <member name="M:eZcad.Utility.SymbolTableUtils.GetOrCreateAppName(Autodesk.AutoCAD.DatabaseServices.Database,Autodesk.AutoCAD.DatabaseServices.Transaction,System.String)">
            <summary>
            从数据库中按名称搜索或者创建出<seealso cref="T:Autodesk.AutoCAD.DatabaseServices.RegAppTableRecord"/>对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:eZcad.Utility.Utils">
            <summary>
            提供一些基础性的操作工具
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.Utility.Utils.GetNullableGenericArgurment(System.Type)">
            <summary>
            返回Nullable所对应的泛型。如果不是Nullable泛型，则返回null。
            </summary>
            <param name="typeIn"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Utils.StringHasNonEnglish(System.String)">
            <summary> 指定的字符串中是否包含有非英文字符 </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Utils.ChooseOpenFile(System.String,System.String,System.Boolean)">
            <summary> 选择一个或多个要打开的文件。成功选择，则返回对应文件的绝对路径，否则返回 null </summary>
            <param name="title">对话框的标题</param>
            <param name="filter"> 文件过滤规则，比如 
            “材料库(*.txt)| *.txt”、
            “Excel文件(*.xls; *.xlsx; *.xlsb)| *.xls; *.xlsx; *.xlsb”、
            “Excel工作簿(*.xlsx)|*.xlsx| Excel二进制工作簿(*.xlsb) |*.xlsb| Excel 97-2003 工作簿(*.xls)|*.xls” </param>
            <param name="multiselect"> 是否支持多选 </param>
            <returns> 成功选择，则返回对应文件的绝对路径，如果没有选择任何文件，则返回 null </returns>
        </member>
        <member name="M:eZcad.Utility.Utils.ChooseSaveFile(System.String,System.String)">
            <summary> 选择要将数据保存到哪个文件。成功选择，则返回对应文件的绝对路径，否则返回 null </summary>
            <param name="title">对话框的标题</param>
            <param name="filter"> 文件过滤规则，比如 
            “材料库(*.txt)| *.txt”、
            “Excel文件(*.xls; *.xlsx; *.xlsb)| *.xls; *.xlsx; *.xlsb”、
            “Excel工作簿(*.xlsx)|*.xlsx| Excel二进制工作簿(*.xlsb) |*.xlsb| Excel 97-2003 工作簿(*.xls)|*.xls” </param>
            <returns> 成功选择，则返回对应文件的绝对路径，否则返回 null </returns>
        </member>
        <member name="M:eZcad.Utility.Utils.GetPointFromString(System.String)">
            <summary> 从字符中解析出坐标点，比如“1.2, 2.3, 5” </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.WriteRegistryKey">
            <summary> 将插件程序注册到注册表中 </summary>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Utils.Sort(Autodesk.AutoCAD.DatabaseServices.ObjectId[],System.Func{System.Object,System.String},System.Func{System.Collections.Generic.KeyValuePair{Autodesk.AutoCAD.DatabaseServices.ObjectId,System.String},System.String})">
            <summary>
                Sorts an array of ObjectIds based on a string property and order.
            </summary>
            <param name="ids">The array of IDs to sort.</param>
            <param name="propertySelector">A function selecting the string property.</param>
            <param name="orderSelector">A function to specify the selection order.</param>
            <returns>An ordered enumerable of key-value pairs.</returns>
            <remarks>
            举例1：Sort ObjectIds based on the layer name
                var sorted = psr.Value.GetObjectIds().Sort(propertySelector: id => id.Layer, orderSelector: kv => kv.Value);
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:eZcad.Utility.Utils.Sort``1(Autodesk.AutoCAD.DatabaseServices.ObjectId[],System.Func{System.Object,``0},System.Func{System.Collections.Generic.KeyValuePair{Autodesk.AutoCAD.DatabaseServices.ObjectId,``0},``0})" -->
        <member name="M:eZcad.Utility.Utils.ConvertToHandle(System.String)">
            <summary> 将表示句柄值的字符转换为句柄 </summary>
            <param name="handle">表示句柄的字符，即16进制的数值，比如“409E”。最小的句柄值为1。</param>
        </member>
        <member name="M:eZcad.Utility.Utils.GetThinedPolyline(Autodesk.AutoCAD.Geometry.Curve3d[],System.Int32,System.Boolean)">
            <summary> 将给定的线性多段线的段数变稀 </summary>
            <param name="cs">用来变稀的那条比较密的多段线几何，集合中的曲线必须首尾相连</param>
            <param name="segPoints">每隔多少个点取用一个，比如2表示只取源多段线中的第1、3、5、7 ... 个点</param>
            <param name="includeAllNonlinear"> true 表示保留所有的曲线段，只将直线段的顶点变疏；false 表示不管是曲线段还是直线段，最终都按顶点坐标转换为直线段 </param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Utils.GetThinedPolyline(Autodesk.AutoCAD.Geometry.Curve3d,System.Double)">
            <summary>
            通过限定分段长度来对多段线变稀或者变密（保留首尾两个点）
            </summary>
            <param name="cs"></param>
            <param name="segLength">每一分段的长度</param>
            <returns></returns>
        </member>
        <member name="M:eZcad.Utility.Utils.ShowExtentsInView(Autodesk.AutoCAD.EditorInput.Editor,Autodesk.AutoCAD.DatabaseServices.Extents3d)">
            <summary> 在AutoCAD界面中显示出指定的二维矩形范围 </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.SetExtendedDataBool(System.Boolean)">
            <summary> 将一个布尔值转换为对应的 ExtendedData </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.GetExtendedDataBool(Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary> 从 ExtendedData 值中提取出对应的 布尔值  </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.SetExtendedDataBool3(System.Nullable{System.Boolean})">
            <summary> 将一个布尔值转换为对应的 ExtendedData </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.GetExtendedDataBool3(Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary> 从 ExtendedData 值中提取出对应的 布尔值  </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.SetExtendedDataEnum(System.Enum)">
            <summary> 将一个枚举值转换为对应的 ExtendedData </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.GetExtendedDataEnum``1(Autodesk.AutoCAD.DatabaseServices.TypedValue)">
            <summary> 从 ExtendedData 值中提取出对应的 枚举值  </summary>
        </member>
        <member name="M:eZcad.Utility.Utils.FocusOnMainUIWindow">
            <summary> 将焦点从操作的<seealso cref="T:System.Windows.Forms.Form"/>转移到 AutoCAD 主界面窗口。此操作在对 无模态窗口 操作时非常有用。 </summary>
        </member>
        <member name="T:eZcad.Utility.ViewportUtil">
            <summary> 将多个块的属性值进行统一编辑 </summary>
        </member>
        <member name="M:eZcad.Utility.ViewportUtil.RotateViewport(Autodesk.AutoCAD.DatabaseServices.Viewport,eZcad.DocumentModifier,Autodesk.AutoCAD.DatabaseServices.Layout,Autodesk.AutoCAD.Geometry.Point2d,System.Double)">
            <summary> 旋转视口，并保持视口内容相对于视口的位置不变 </summary>
            <param name="vp">要进行旋转的视口</param>
            <param name="layout">视口所在的那个布局空间</param>
            <param name="basePt">旋转的基点在图纸空间中的坐标</param>
            <param name="angle">要旋转的角度，单位为弧度，按右手准则进行旋转</param>
        </member>
        <member name="T:eZcad.Utility.ViewportUtil.DrawingBorder">
            <summary> 绘图图框 </summary>
        </member>
        <member name="P:eZcad.Utility.ViewportUtil.DrawingBorder.CenterPoint">
            <summary> 绘图区的中心点 </summary>
        </member>
        <member name="P:eZcad.Utility.ViewportUtil.DrawingBorder.InsertPoint">
            <summary> 绘图图框的插入点 </summary>
        </member>
        <member name="T:eZcad.AssemblyLoader.eZAssemblyLoader">
            <summary>
            为了将要加载的程序集中的外部命令显示到<see cref="T:eZcad.AddinManager.form_AddinManager"/>窗口中，
            在加载程序集时（只是加载程序集，而不是调用程序集中的外部命令时），可能会出现“未能加载文件或程序集“Accessibility,Version=2.0.0.0，Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a”或它的某一个依赖项。系统找不到指定文件。”这种报错。
            此时要利用  AppDomain.CurrentDomain.AssemblyResolve  事件进行解决。
            </summary>
            <remarks>此类由Zengfy参照<see cref="T:eZcad.AddinManager.AssemLoader"/>类自行编写，即为了解决在 AutoCAD 2016 中，AddinManager Load 程序集时，总是出现
            “未能加载文件或程序集“Accessibility,Version=2.0.0.0，Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a”或它的某一个依赖项。系统找不到指定文件。”
            这种报错的问题。在AutoCAD 2014 的开发中并不需要。</remarks>
        </member>
        <member name="F:eZcad.AssemblyLoader.eZAssemblyLoader._srcDir">
            <summary> 要进行加载的主程序集所在的文件夹 </summary>
        </member>
        <member name="F:eZcad.AssemblyLoader.eZAssemblyLoader._srcDll">
            <summary> 要进行加载的主程序集的名称，比如 eZcad.dll </summary>
        </member>
        <member name="F:eZcad.AssemblyLoader.eZAssemblyLoader._newAssemblyAddedToAppDomain">
            <summary> 是否为当前程序域中添加了新的程序集 </summary>
        </member>
        <member name="F:eZcad.AssemblyLoader.eZAssemblyLoader._appDomainAssemblies">
            <summary> 当前程序域中已经加载的程序集 </summary>
        </member>
        <member name="M:eZcad.AssemblyLoader.eZAssemblyLoader.HookAssemblyResolve">
            <summary>
            AssemblyResolve事件在.Net对程序集的解析失败时触发，返回一个Assembly对象。
            因此，我们只要在这个事件的处理程序里手动加载对应目录的dll，并把对应dll的Assembly对象返回， .Net就能正确加载对应的dll了。
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:eZcad.AssemblyLoader.eZAssemblyLoader.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary> 在 Execute() 方法中将不能引用到的程序集进行手动加载 </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns>返回的程序集即作为调用的程序集，即使返回的程序集并不是想要的那一个。</returns>
        </member>
        <member name="M:eZcad.AssemblyLoader.eZAssemblyLoader.SearchAssemblyFileInDllFolders(System.String)">
            <summary> 源程序集的绝对路径 </summary>
            <param name="srcDllPath"></param>
            <param name="assemName"></param>
            <returns></returns>
        </member>
        <member name="M:eZcad.AssemblyLoader.eZAssemblyLoader.LoadAddin(System.String)">
            <summary> 将程序集加载到程序中 </summary>
            <param name="filePath">程序集的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:eZcad_AddinManager.cmd_AddinManagerLoader.SetImpliedSelection">
            <summary> 在执行方法之前先获取已经选择到的选择对象集合 </summary>
        </member>
        <member name="T:eZcad_AddinManager.MyPlugin">
            <summary>
            AddinManager 插件程序集 加载与卸载时的操作
            </summary>
            
            <remarks>
            This class is instantiated by AutoCAD once and kept alive for the 
            duration of the session. If you don't do any one time initialization 
            then you should remove this class.
            </remarks>
        </member>
        <member name="M:eZcad_AddinManager.MyPlugin.Autodesk#AutoCAD#Runtime#IExtensionApplication#Initialize">
            <summary>
            加载 AddinManager 插件时自动执行
            </summary>
        </member>
    </members>
</doc>
